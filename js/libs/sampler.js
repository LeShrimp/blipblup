// Generated by CoffeeScript 1.9.2
(function() {
  define(['underscore'], function(_) {
    var Sampler, audioContext, isRecording, leftChannel, micSource, recorder, recordingLength, rightChannel, samples;
    audioContext = new window.AudioContext();
    audioContext.createScriptProcessor = audioContext.createScriptProcessor || audioContext.webkitCreateScriptProcessor;
    isRecording = false;
    leftChannel = null;
    rightChannel = null;
    recordingLength = 0;
    micSource = null;
    recorder = null;
    samples = [];
    (function() {
      return window.navigator.getUserMedia({
        audio: true
      }, (function(stream) {
        var bufferSize;
        bufferSize = 2048;
        micSource = audioContext.createMediaStreamSource(stream);
        recorder = audioContext.createScriptProcessor(bufferSize, 2, 2);
        return recorder.onaudioprocess = function(e) {
          var left, right;
          if (isRecording) {
            left = e.inputBuffer.getChannelData(0);
            right = e.inputBuffer.getChannelData(1);
            leftChannel.push(new Float32Array(left));
            rightChannel.push(new Float32Array(right));
            return recordingLength += bufferSize;
          }
        };
      }), function() {});
    })();
    Sampler = {
      startRecording: function() {
        leftChannel = [];
        rightChannel = [];
        recordingLength = 0;
        return isRecording = true;
      },
      stopRecording: function() {
        var flatten, interleave, left, right, total;
        flatten = function(channelData, bufferSize) {
          var buffer, j, len, offset, result;
          result = new Float32Array(bufferSize);
          offset = 0;
          for (j = 0, len = channelData.length; j < len; j++) {
            buffer = channelData[j];
            result.set(buffer, offset);
            offset += buffer.length;
          }
          return result;
        };
        interleave = function(left, right) {
          var i, inputIndex, result;
          result = new Float32Array(left.length + right.length);
          inputIndex = 0;
          i = 0;
          while (i < result.length) {
            result[i++] = left[inputIndex];
            result[i++] = right[inputIndex];
            inputIndex++;
          }
          return result;
        };
        isRecording = false;
        left = flatten(leftChannel, recordingLength);
        right = flatten(rightChannel, recordingLength);
        total = interleave(left, right);
        return audioContext.decodeAudioData(left, (function(buf) {
          return samples.push(buf);
        }), function() {});
      },
      playSample: function(id) {
        var destination, source;
        source = audioContext.createBufferSource();
        destination = audioContext.destination;
        source.buffer = samples[id];
        return source.connect(destination);
      }
    };
    return Sampler;
  });

}).call(this);
